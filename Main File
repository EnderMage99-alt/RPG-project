function setup() {
  createCanvas(600, 400);
}


var player_HP = 100
var player_max_HP = 100
var player_MANA = 50
var player_max_MANA = 100
var foe_HP = 200
var foe_max_HP = 200

var foe_thinking_counter = 0
var block_counter = 0
var block_delay = 120
var textbox_last_message = "Combat is starting..."

var block_active = false;
var player_attacked = false;
var hide_buttons = false;
var foe_turn = false;
var player_block = false;
var player_won = false;
var player_lost = false;
var foe_charging = false;
var foe_special = false;

var player_hb_x = 400
var player_hb_x_target = 400
var player_hb_x_max = 400

var player_mb_x_max = 400
var player_mb_x = 200

var foe_hb_x = 500
var foe_hb_x_target = 500
var foe_hb_x_max = 500

var decrease_speed = 5

var atk_but = true
var atk_but_x = 100
var atk_but_y = 240
var atk_but_w = 75
var atk_but_h = 50

var blo_but = true
var blo_but_x = 200
var blo_but_y = 240
var blo_but_w = 75
var blo_but_h = 50

var ex_atk_but = true
var ex_atk_but_x = 300
var ex_atk_but_y = 240
var ex_atk_but_w = 75
var ex_atk_but_h = 50

var heal_but = true
var heal_but_x = 400
var heal_but_y = 240
var heal_but_w = 75
var heal_but_h = 50


var play_but = true
var play_but_x = 200
var play_but_y = 150
var play_but_w = 200
var play_but_h = 75

let img;
let bg_img;

var img_counter = 0
var img_delay = 60
var img_y = 90
var img_y_max = 92

var hurt_counter = 255


// Load the image.
function preload() {
  img = loadImage('https://static.vecteezy.com/system/resources/thumbnails/027/190/981/small_2x/pixel-art-monster-character-4-png.png');

  bg_img = loadImage('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTi0HqZvch4xcsnLF03GZW-Jin8nG8V9pza7g&s');
}

function draw() {
  background(220);
  if(player_won){
    send_text_message("You have defeated the foe! You win!");
    play_again();
    if(mouseIsPressed) {
      if(mouseX > play_but_x && mouseX < play_but_x + play_but_w && 
         mouseY > play_but_y && mouseY < play_but_y + play_but_h){
          restart_battle();
      }
    }
    return
     }
  if(player_lost){
    send_text_message("You have lost to the foe. You lose.");
    play_again();
    if(mouseIsPressed) {
      if(mouseX > play_but_x && mouseX < play_but_x + play_but_w && 
         mouseY > play_but_y && mouseY < play_but_y + play_but_h){
          restart_battle();
      }
    }
    return
     }
  image(bg_img, 0, 0, 600, 400);
  if(hurt_counter < 255){
    tint(255, hurt_counter, hurt_counter);
  } else {
    tint(255, 255, 255, 255);
  }
  image(img, 210, img_y, 140, 140);
  tint(255, 255, 255, 255);
  img_counter++
  if(img_counter >= img_delay){
    img_counter = 0
    if(img_y < img_y_max){
      img_y +=2
    } else {
      img_y -=2
    }
    }
    
  fill(255, 0, 0);
  rect(50, 25, 500, 30); //Foe HP bar
  rect(100, 300, 400, 30); //Player HP bar
  rect(100, 330, 400, 30); //Player MANA bar
  update_player_HP();
  update_foe_HP();
  update_player_MANA();
  send_text_message(textbox_last_message);
  if(block_active){
      console.log('block_active is active');
    block_counter++
    if(block_counter >= block_delay){
      block_counter = 0
      block_active = false;
      hide_buttons = false;
      foe_turn = true;
    }
  }
  
  if(foe_turn){
    if(foe_thinking_counter <= 180){
      foe_thinking_counter++
      send_text_message("The foe is pondering their next move...");
    } else{
      foe_take_action();
    }
    
  }
  
  if(((player_hb_x == player_hb_x_target) && (foe_hb_x == foe_hb_x_target) && (!foe_turn)) && (!hide_buttons)){
    attack_button();
    block_button();
    ex_attack_button();
    heal_button();
    if(mouseIsPressed) {
      if(mouseX > atk_but_x && mouseX < atk_but_x + atk_but_w && 
         mouseY > atk_but_y && mouseY < atk_but_y + atk_but_h){
          press_atk();
      }
    }
    if(mouseIsPressed) {
      if(mouseX > blo_but_x && mouseX < blo_but_x + blo_but_w && 
         mouseY > blo_but_y && mouseY < blo_but_y + blo_but_h){
          press_blo();
      }
    }
    if(mouseIsPressed) {
      if(mouseX > ex_atk_but_x && mouseX < ex_atk_but_x + ex_atk_but_w && 
         mouseY > ex_atk_but_y && mouseY < ex_atk_but_y + ex_atk_but_h){
          press_ex_atk();
      }
    }
    if(mouseIsPressed) {
      if(mouseX > heal_but_x && mouseX < heal_but_x + heal_but_w && 
         mouseY > heal_but_y && mouseY < heal_but_y + heal_but_h){
          press_heal();
      }
    }
  }
}















//Player HP functions
function player_hurt(amount){
  if(player_hb_x != player_hb_x_target){
    return 
  }
  
  player_HP -= amount;
  if(player_HP < 0){
    player_HP = 0;
  }

  if(player_HP > player_max_HP){
    player_HP = player_max_HP;
  }
    
  console.log('Player damage taken ' + amount);
  console.log('Player HP ' + player_HP);
  let HP_percentage = (player_HP / player_max_HP);
  console.log('HP_percentage = ' + HP_percentage);
  player_hb_x_target = (player_hb_x_max * HP_percentage);
  console.log('player_hb_x_target = ' + player_hb_x_target);
    
  update_player_HP();
}

function update_player_HP(){
  fill(0, 255, 0);
  if(player_hb_x != player_hb_x_target){
    if(player_hb_x > player_hb_x_target){
      player_hb_x -= decrease_speed; 
    } else if(player_hb_x < player_hb_x_target) {
      player_hb_x += decrease_speed;
    }    
  }
  if(abs(player_hb_x_target - player_hb_x) <= 60){
       decrease_speed = 1;
     } else if(abs(player_hb_x_target - player_hb_x) <= 200) {
       decrease_speed = 2;
     } else {
       decrease_speed = 3;
     }
  
  if(abs(player_hb_x_target - player_hb_x) <= 1){
    player_hb_x = player_hb_x_target;
  }
  if(player_hb_x == 0){
    player_lost = true;
  }
  
  rect(100, 300, player_hb_x, 30); //Player HP bar
}
  
//Player MANA
function player_change_MA(amount){
  if(amount > 0){
    if(player_MANA < amount){
      return false
    }
  }
  console.log('MANA Amount ' + amount);
  player_MANA -= amount;
  if(player_MANA > player_max_MANA){
    player_MANA = player_max_MANA;
  }
  console.log('Player MANA ' + player_MANA);
  let MANA_percentage = (player_MANA / player_max_MANA);
  console.log('MANA_percentage ' + MANA_percentage);
  player_mb_x = (player_mb_x_max * MANA_percentage);
  console.log('player_mb_x ' + player_mb_x);

  update_player_MANA();
  return true
}
  
function update_player_MANA(){
  fill(52, 183, 235);
  rect(100, 330, player_mb_x, 30); //Player MANA bar
}

function send_text_message(textmessage = null){
  fill(0, 0, 0);
  textSize(20);
  if(textmessage){
    textbox_last_message = textmessage    
  }
  text(textbox_last_message, 140, 60, 400);
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
//Foe HP functions
function foe_hurt(amount){
  if(foe_hb_x != foe_hb_x_target){
    return 
  }
  
  foe_HP -= amount;
  if(foe_HP < 0){
    foe_HP = 0;
  }
  console.log('Foe HP ' + foe_HP);
  let HP_percentage = (foe_HP / foe_max_HP);
  console.log('HP_percentage = ' + HP_percentage);
  foe_hb_x_target = (foe_hb_x_max * HP_percentage);
  console.log('foe_hb_x_target = ' + foe_hb_x_target);
  hurt_counter = 0;
    
  update_foe_HP();
}
  
function update_foe_HP(){
  if(hurt_counter < 255){
     hurt_counter += 2;
  }
  
  fill(0, 255, 0);
  if(foe_hb_x != foe_hb_x_target){
    if(foe_hb_x > foe_hb_x_target){
      foe_hb_x -= decrease_speed; 
    } else if(foe_hb_x < foe_hb_x_target) {
      foe_hb_x += decrease_speed;
    }    
  }
  if(abs(foe_hb_x_target - foe_hb_x) <= 60){
       decrease_speed = 1;
     } else if(abs(foe_hb_x_target - foe_hb_x) <= 200) {
       decrease_speed = 2;
     } else {
       decrease_speed = 3;
     }
  
  if(abs(foe_hb_x_target - foe_hb_x) <= 1){
    foe_hb_x = foe_hb_x_target;
    if(player_attacked){
      foe_turn = true;
      player_attacked = false;
    }

  }
  
  rect(50, 25, foe_hb_x, 30); //Foe HP bar
  if(foe_hb_x == 0){
    player_won = true;
  }
}
  
function foe_take_action(){
  if(foe_charging){
    let MANA_percentage = (player_MANA / player_max_MANA);
    if(MANA_percentage >= 0.5){
      player_hurt(round(random(5, 8))); 
      send_text_message("The foe is misses their special attack!")
    } else {
      player_hurt(round(random(50, 60)));
      send_text_message("The foe lands their special attack!")
    }
    foe_charging = false;    
  } else {
    let picked_action = random(1, 100);  
    if(picked_action > 40){
      if(player_block){
        player_hurt(round(random(7, 14))); 
      } else {
        player_hurt(round(random(16, 32)));
      }
      send_text_message("The foe attacks you!")
    } else if(picked_action > 10){
      foe_charging = true;
      send_text_message("The foe is charging a special attack, It will hit if you have less then 50% MANA!")    
    } else {
      send_text_message("The foe forgets about their move!")
    }
  }

  foe_turn = false;
  player_block = false;
  hide_buttons = false;
  foe_thinking_counter = 0;
}
  
  
  
  
  
  
//Buttons
function press_atk(){
  foe_hurt(round(random(20, 30)));
  player_change_MA(-10);
  hide_buttons = true;
  player_attacked = true;
  send_text_message("You attack the foe, and regain some MANA!");
}

function press_blo(){
  player_change_MA(-30);
  send_text_message("You block the foes next attack, and regain a lot of MANA!");
  player_block = true;
  block_active = true;
  hide_buttons = true;
}

function press_ex_atk(){
  if(player_change_MA(40)){
    player_attacked = true;
    hide_buttons = true;
    foe_hurt(round(random(40, 60)));
    send_text_message("You special attack the foe!");
  } else {
    send_text_message("You don't have enough MANA...");    
  }
}

function press_heal(){
  if(player_change_MA(30)){
    hide_buttons = true;
    block_active = true;
    player_hurt(round(random(-25, -35)));
    send_text_message("You heal yourself!");
  } else {
    send_text_message("You don't have enough MANA...");    
  }
}
  
function attack_button(){
  fill(247, 140, 126);
  rect(atk_but_x, atk_but_y, atk_but_w, atk_but_h, 20);
  fill(0, 0, 0);
  textSize(18);
  text('Attack', atk_but_x + 10, atk_but_y + 30);
  atk_but = true
}
  
function block_button(){
  fill(115, 217, 235);
  rect(blo_but_x, blo_but_y, blo_but_w, blo_but_h, 20);
  fill(0, 0, 0);
  textSize(18);
  text('Block', blo_but_x + 10, blo_but_y + 30);
  blo_but = true
}

function ex_attack_button(){
  fill(231, 232, 146);
  rect(ex_atk_but_x, ex_atk_but_y, ex_atk_but_w, ex_atk_but_h, 20);
  fill(0, 0, 0);
  textSize(14);
  text('EX Attack', ex_atk_but_x + 5, ex_atk_but_y + 30);
  ex_atk_but = true
}

function heal_button(){
  fill(66, 245, 147);
  rect(heal_but_x, heal_but_y, heal_but_w, heal_but_h, 20);
  fill(0, 0, 0);
  textSize(18);
  text('Heal', heal_but_x + 15, heal_but_y + 30);
  heal_but = true
}
  
function play_again(){
  fill(231, 232, 146);
  rect(play_but_x, play_but_y, play_but_w, play_but_h, 20);
  fill(0, 0, 0);
  textSize(22);
  text('Play again?', play_but_x + 40, play_but_y + 45);
  play_but = true
}

function restart_battle(){
  console.log('RESTART BATTLE Button pressed');
  player_won = false;
  player_lost = false;
  player_HP = player_max_HP
  player_MANA = player_max_MANA/2
  foe_HP = foe_max_HP
  
  player_hb_x = player_hb_x_max
  player_hb_x_target = player_hb_x_max

  foe_hb_x = foe_hb_x_max
  foe_hb_x_target = foe_hb_x_max

  player_mb_x = player_mb_x_max/2
  foe_turn = false;
  player_block = false;
  hide_buttons = false;
  hurt_counter = 255;
  foe_thinking_counter = 0;
  send_text_message("Combat is starting...");
}
  
//Fix OVER heal, block delay after using heal breaks
