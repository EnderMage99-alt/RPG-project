function setup() {
  let cnv = createCanvas(600, 400);
  cnv.position(700, 200);
}

var scene = 0;
var last_scene = 0;

var player_HP = 100
var player_max_HP = 100
var player_MANA = 50
var player_max_MANA = 100
var foe_HP = 200
var foe_max_HP = 200
var foe_low_damage = 16
var foe_high_damage = 32
var foe_low_blo_damage = 7
var foe_high_blo_damage = 14
var foe_sp_low_damage = 50
var foe_sp_high_damage = 60
var icon_used = 2
var last_button = 0
var foe_1_defeated = false
var foe_2_defeated = false
var foe_3_defeated = false

var foe_thinking_counter = 0
var block_counter = 0
var block_delay = 120
var textbox_last_message = "Combat is starting..."

var block_active = false;
var player_attacked = false;
var hide_buttons = false;
var foe_turn = false;
var player_block = false;
var foe_charging = false;
var foe_special = false;

var player_hb_x = 400
var player_hb_x_target = 400
var player_hb_x_max = 400

var player_mb_x_max = 400
var player_mb_x = 200

var foe_hb_x = 500
var foe_hb_x_target = 500
var foe_hb_x_max = 500

var decrease_speed = 5

//Combat Button Loc
var atk_but = true
var atk_but_x = 100
var atk_but_y = 240
var atk_but_w = 75
var atk_but_h = 50

var blo_but = true
var blo_but_x = 200
var blo_but_y = 240
var blo_but_w = 75
var blo_but_h = 50

var ex_atk_but = true
var ex_atk_but_x = 300
var ex_atk_but_y = 240
var ex_atk_but_w = 75
var ex_atk_but_h = 50

var heal_but = true
var heal_but_x = 400
var heal_but_y = 240
var heal_but_w = 75
var heal_but_h = 50


//Menu Button Locs
var play_but = true
var play_but_x = 200
var play_but_y = 150
var play_but_w = 200
var play_but_h = 75

var menu_but = true
var menu_but_x = 200
var menu_but_y = 240
var menu_but_w = 200
var menu_but_h = 75

var easy_but = true
var easy_but_x = 130
var easy_but_y = 160
var easy_but_w = 100
var easy_but_h = 75

var medium_but = true
var medium_but_x = 260
var medium_but_y = 160
var medium_but_w = 100
var medium_but_h = 75

var hard_but = true
var hard_but_x = 390
var hard_but_y = 160
var hard_but_w = 100
var hard_but_h = 75

var secret_but = true
var secret_but_x = 250
var secret_but_y = 260
var secret_but_w = 120
var secret_but_h = 75

let img;
let bg_img;

var img_counter = 0
var img_delay = 60
var img_y = 90
var img_y_max = 92

var hurt_counter = 255

var seeking_button = -1;

// Load the image.
function preload() {
  img = loadImage('https://static.vecteezy.com/system/resources/thumbnails/027/190/981/small_2x/pixel-art-monster-character-4-png.png');

  img_easy = loadImage('https://static.vecteezy.com/system/resources/thumbnails/027/517/567/small/pixel-art-cartoon-wild-shadow-deamon-character-png.png');

  img_hard = loadImage('https://media.tenor.com/qANjmZo5MscAAAAj/monster-boss.gif');
  
  bg_img = loadImage('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTi0HqZvch4xcsnLF03GZW-Jin8nG8V9pza7g&s');

  bg_img_2 = loadImage('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQmWSo4t-C2baCv6jeGit_Wb-Zl-3MKisZoWQ&s');

  bg_img_3 = loadImage('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0p44RHod4jAYnHQilOW6bFpNNMO0PvFwWgRGlOg13gKKzR52UjFXXf8rddmUCPeffGcE&usqp=CAU');

  img_sec = loadImage('https://media.tenor.com/ACxFpM3q1yYAAAAj/faith-the-unholy-trinity-monster.gif')

  bg_img_sec = loadImage('https://i.ytimg.com/vi/C2GpeLnE0AU/hq720.jpg?sqp=-oaymwE7CK4FEIIDSFryq4qpAy0IARUAAAAAGAElAADIQj0AgKJD8AEB-AH-CYAC0AWKAgwIABABGEggGSh_MA8=&rs=AOn4CLBlwLxb5QxtSkX1khtpfn2AzRHW4A');

  bg_img_menu = loadImage('https://mir-s3-cdn-cf.behance.net/project_modules/source/35c11e30942431.563a0d237abab.png');

  trophy_1_img = loadImage('https://cdn-icons-png.freepik.com/512/465/465269.png');

  trophy_2_img = loadImage('https://png.pngtree.com/png-clipart/20220704/ourmid/pngtree-trophy-cup-winner-pixel-illustration-png-image_5685913.png');

  trophy_3_img = loadImage('https://png.pngtree.com/png-vector/20240323/ourmid/pngtree-pixel-golden-trophy-the-winner-trophy-cup-pixel-art-with-sparkle-png-image_12193297.png');
  
}

function draw() {
  background(220);
  if(scene == 0){
      image(bg_img_menu, 0, 0, 600, 400);
      easy_button();
      medium_button();
      hard_button();
      if(foe_1_defeated){
        image(trophy_1_img, 20, 20, 80, 80);
      }
      if(foe_2_defeated){
        image(trophy_2_img, 100, -20, 140, 140);
      }
      if(foe_3_defeated){
        image(trophy_3_img, 200, -40, 160, 160);
      }
      if(foe_1_defeated && foe_2_defeated && foe_3_defeated)
        secret_button();
      if(mouseIsPressed) {
        if(mouseX > easy_but_x && mouseX < easy_but_x + easy_but_w && 
           mouseY > easy_but_y && mouseY < easy_but_y + easy_but_h){
          foe_low_damage = 10
          foe_high_damage = 20
          foe_low_blo_damage = 4
          foe_high_blo_damage = 7
          foe_sp_low_damage = 30
          foe_sp_high_damage = 40
          icon_used = 1
          scene = 1;
          last_scene = 1;
          restart_battle();
        }
      }
      if(mouseIsPressed) {
        if(mouseX > hard_but_x && mouseX < hard_but_x + hard_but_w && 
           mouseY > hard_but_y && mouseY < hard_but_y + hard_but_h){
          foe_HP = 300
          foe_max_HP = 300
          foe_low_damage = 20
          foe_high_damage = 30
          foe_low_blo_damage = 10
          foe_high_blo_damage = 15
          foe_sp_low_damage = 60
          foe_sp_high_damage = 75
          icon_used = 3
          scene = 1;
          restart_battle();
        }
      }
      if(mouseIsPressed) {
        if(mouseX > medium_but_x && mouseX < medium_but_x + medium_but_w && 
           mouseY > medium_but_y && mouseY < medium_but_y + medium_but_h){
            icon_used = 2
            foe_low_damage = 16
            foe_high_damage = 32
            foe_low_blo_damage = 7
            foe_high_blo_damage = 14
            foe_sp_low_damage = 50
            foe_sp_high_damage = 60
            scene = 1;
            restart_battle();
        }
      }
      if(foe_1_defeated && foe_2_defeated && foe_3_defeated){
      if(mouseIsPressed) {
        if(mouseX > secret_but_x && mouseX < secret_but_x + secret_but_w && 
           mouseY > secret_but_y && mouseY < secret_but_y + secret_but_h){
            icon_used = 666
            foe_HP = 666
            foe_max_HP = 666
            foe_low_damage = 20
            foe_high_damage = 25
            foe_low_blo_damage = 10
            foe_high_blo_damage = 20
            foe_sp_low_damage = 50
            foe_sp_high_damage = 60
            scene = 1;
            restart_battle();
            send_text_message("You are ambushed by ???");
        }
      }
    }
  }
  if(scene == 1){
    if(icon_used == 1){
      image(bg_img_2, 0, 0, 600, 400);
    }
    if(icon_used == 2){
      image(bg_img, 0, 0, 600, 400); 
    }
    if(icon_used == 3){
      image(bg_img_3, 0, 0, 600, 400);
    }
    if(icon_used == 666){
      image(bg_img_sec, 0, 0, 600, 400);
    }
    if(hurt_counter < 255){
      tint(255, hurt_counter, hurt_counter);
    } else {
      tint(255, 255, 255, 255);
    }
    if(icon_used == 1){
    image(img_easy, 210, img_y, 140, 140);
    tint(255, 255, 255, 255);
    }
    if(icon_used == 2){
    image(img, 210, img_y, 140, 140);
    tint(255, 255, 255, 255);
    img_counter++
    if(img_counter >= img_delay){
      img_counter = 0
      if(img_y < img_y_max){
        img_y +=2
      } else {
        img_y -=2
      }
      }
    }
    if(icon_used == 3){
    image(img_hard, 140, 50, 325, 325);
    tint(255, 255, 255, 255);
    }
    if(icon_used == 666){
    image(img_sec, 210, 100, 140, 140);
    tint(255, 255, 255, 255);
    }    
    fill(255, 0, 0);
    rect(50, 25, 500, 30); //Foe HP bar
    rect(100, 300, 400, 30); //Player HP bar
    rect(100, 330, 400, 30); //Player MANA bar
    fill(255, 255, 255);
    rect(425, 100, 175, 120);
    update_player_HP();
    update_foe_HP();
    update_player_MANA();
    send_text_message(textbox_last_message);
    if(block_active){
        console.log('block_active is active');
      block_counter++
      if(block_counter >= block_delay){
        block_counter = 0
        block_active = false;
        hide_buttons = false;
        foe_turn = true;
      }
    }

    if(foe_turn){
      if(foe_thinking_counter <= 180){
        foe_thinking_counter++
        send_text_message("The foe is pondering their next move...");
      } else{
        if(icon_used == 666){
          sec_foe_take_action();
        } else {
          foe_take_action();
        }

      }

    }

    if(((player_hb_x == player_hb_x_target) && (foe_hb_x == foe_hb_x_target) && (!foe_turn)) && (!hide_buttons)){
      attack_button();
      block_button();
      ex_attack_button();
      heal_button();
      if(mouseIsPressed) {
        if(mouseX > atk_but_x && mouseX < atk_but_x + atk_but_w && 
           mouseY > atk_but_y && mouseY < atk_but_y + atk_but_h){
            press_atk();
        }
      }
      if(mouseIsPressed) {
        if(mouseX > blo_but_x && mouseX < blo_but_x + blo_but_w && 
           mouseY > blo_but_y && mouseY < blo_but_y + blo_but_h){
            press_blo();
        }
      }
      if(mouseIsPressed) {
        if(mouseX > ex_atk_but_x && mouseX < ex_atk_but_x + ex_atk_but_w && 
           mouseY > ex_atk_but_y && mouseY < ex_atk_but_y + ex_atk_but_h){
            press_ex_atk();
        }
      }
      if(mouseIsPressed) {
        if(mouseX > heal_but_x && mouseX < heal_but_x + heal_but_w && 
           mouseY > heal_but_y && mouseY < heal_but_y + heal_but_h){
            press_heal();
        }
      }
    }
  }
  
  if(scene == 2){
    textSize(20);
    text("You have defeated the foe! You win!", 140, 60, 400);
    play_again();
    if(mouseIsPressed) {
      if(mouseX > play_but_x && mouseX < play_but_x + play_but_w && 
         mouseY > play_but_y && mouseY < play_but_y + play_but_h){
          restart_battle();
      }
    }
    menu_button();
    if(mouseIsPressed) {
      if(mouseX > menu_but_x && mouseX < menu_but_x + play_but_w && 
         mouseY > menu_but_y && mouseY < menu_but_y + play_but_h){
          scene = 0;
      }
    }
  }
  if(scene == 3){
    textSize(20);
    text("You have been defeated by the foe. You lose.", 140, 60, 400);
    play_again();
    if(mouseIsPressed) {
      if(mouseX > play_but_x && mouseX < play_but_x + play_but_w && 
         mouseY > play_but_y && mouseY < play_but_y + play_but_h){
          restart_battle();
          scene = 1;
      }
    }
    menu_button();
      if(mouseIsPressed) {
        if(mouseX > menu_but_x && mouseX < menu_but_x + play_but_w && 
           mouseY > menu_but_y && mouseY < menu_but_y + play_but_h){
            scene = 0;
        }
      }
  }
}















//Player HP functions
function player_hurt(amount){
  if(player_hb_x != player_hb_x_target){
    return 
  }
  
  player_HP -= amount;
  if(player_HP < 0){
    player_HP = 0;
  }

  if(player_HP > player_max_HP){
    player_HP = player_max_HP;
  }
    
  console.log('Player damage taken ' + amount);
  console.log('Player HP ' + player_HP);
  let HP_percentage = (player_HP / player_max_HP);
  console.log('HP_percentage = ' + HP_percentage);
  player_hb_x_target = (player_hb_x_max * HP_percentage);
  console.log('player_hb_x_target = ' + player_hb_x_target);
    
  update_player_HP();
}

function update_player_HP(){
  fill(0, 255, 0);
  if(player_hb_x != player_hb_x_target){
    if(player_hb_x > player_hb_x_target){
      player_hb_x -= decrease_speed; 
    } else if(player_hb_x < player_hb_x_target) {
      player_hb_x += decrease_speed;
    }    
  }
  if(abs(player_hb_x_target - player_hb_x) <= 60){
       decrease_speed = 1;
     } else if(abs(player_hb_x_target - player_hb_x) <= 200) {
       decrease_speed = 2;
     } else {
       decrease_speed = 3;
     }
  
  if(abs(player_hb_x_target - player_hb_x) <= 1){
    player_hb_x = player_hb_x_target;
  }
  if(player_hb_x == 0){
    scene = 3;
  }
  
  rect(100, 300, player_hb_x, 30); //Player HP bar
}
  
//Player MANA
function player_change_MA(amount){
  if(amount > 0){
    if(player_MANA < amount){
      return false
    }
  }
  console.log('MANA Amount ' + amount);
  player_MANA -= amount;
  if(player_MANA > player_max_MANA){
    player_MANA = player_max_MANA;
  }
  console.log('Player MANA ' + player_MANA);
  let MANA_percentage = (player_MANA / player_max_MANA);
  console.log('MANA_percentage ' + MANA_percentage);
  player_mb_x = (player_mb_x_max * MANA_percentage);
  console.log('player_mb_x ' + player_mb_x);

  update_player_MANA();
  return true
}
  
function update_player_MANA(){
  fill(52, 183, 235);
  rect(100, 330, player_mb_x, 30); //Player MANA bar
}

function send_text_message(textmessage = null){
  fill(0, 0, 0);
  textSize(16);
  if(textmessage){
    textbox_last_message = textmessage    
  }
  text(textbox_last_message, 430, 110, 180);
}
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
//Foe HP functions
function foe_hurt(amount){
  if(foe_hb_x != foe_hb_x_target){
    return 
  }
  
  foe_HP -= amount;
  if(foe_HP < 0){
    foe_HP = 0;
  }
  console.log('Foe HP ' + foe_HP);
  let HP_percentage = (foe_HP / foe_max_HP);
  console.log('HP_percentage = ' + HP_percentage);
  foe_hb_x_target = (foe_hb_x_max * HP_percentage);
  console.log('foe_hb_x_target = ' + foe_hb_x_target);
  hurt_counter = 0;
    
  update_foe_HP();
}
  
function update_foe_HP(){
  if(hurt_counter < 255){
     hurt_counter += 2;
  }
  
  fill(0, 255, 0);
  if(foe_hb_x != foe_hb_x_target){
    if(foe_hb_x > foe_hb_x_target){
      foe_hb_x -= decrease_speed; 
    } else if(foe_hb_x < foe_hb_x_target) {
      foe_hb_x += decrease_speed;
    }    
  }
  if(abs(foe_hb_x_target - foe_hb_x) <= 60){
       decrease_speed = 1;
     } else if(abs(foe_hb_x_target - foe_hb_x) <= 200) {
       decrease_speed = 2;
     } else {
       decrease_speed = 3;
     }
  
  if(abs(foe_hb_x_target - foe_hb_x) <= 1){
    foe_hb_x = foe_hb_x_target;
    if(player_attacked){
      foe_turn = true;
      player_attacked = false;
    }

  }
  
  rect(50, 25, foe_hb_x, 30); //Foe HP bar
  if(foe_hb_x == 0){
    if(icon_used == 1){
      foe_1_defeated = true
    } else if(icon_used == 2){
      foe_2_defeated = true
    } else if(icon_used == 3){
      foe_3_defeated = true
    }
    scene = 2;
  }
}
  
function foe_take_action(){
  if(foe_charging){
    let MANA_percentage = (player_MANA / player_max_MANA);
    if(MANA_percentage >= 0.5){
      player_hurt(round(random(5, 8))); 
      send_text_message("The foe is misses their special attack!")
    } else {
      player_hurt(round(random(foe_sp_low_damage, foe_sp_high_damage)));
      send_text_message("The foe lands their special attack!")
    }
    foe_charging = false;    
  } else {
    let picked_action = random(1, 100);  
    if(picked_action > 40){
      if(player_block){
        player_hurt(round(random(foe_low_blo_damage, foe_high_blo_damage))); 
      } else {
        player_hurt(round(random(foe_low_damage, foe_high_damage)));
      }
      if(icon_used == 2){
        send_text_message("The foe attacks you, and drains a bit of your MANA!")
        player_change_MA(5)
      } else {
        send_text_message("The foe attacks you!") 
      }
    } else if(picked_action > 10){
      foe_charging = true;
      send_text_message("The foe is charging a special attack, It will hit if you have less then 50% MANA!")    
    } else {
      if(icon_used == 3){
        if(player_change_MA(50)){
          send_text_message("The foe drains your MANA!");
        } else {
          send_text_message("The foe tries to drain your MANA, and fails!");    
        }
      } else if (icon_used == 2){
        send_text_message("The foe casts heal!")
        foe_hurt(round(random(-20, -30)));
      } else {
        send_text_message("The foe forgets about their move!")
      }
      
    }
  }

  foe_turn = false;
  player_block = false;
  hide_buttons = false;
  foe_thinking_counter = 0;
}

function sec_foe_take_action(){
  if(seeking_button == last_button){
     player_hurt(round(random(30, 40)));
    send_text_message("Your last move triggers ???, Causing ??? to rip into you!")
  } else {
  let picked_action = random(1, 100);
  if(picked_action > 40){
    if(player_block){
      player_hurt(round(random(foe_low_blo_damage, foe_high_blo_damage))); 
    } else {
      player_hurt(round(random(foe_low_damage, foe_high_damage)));
    }
    if(player_change_MA(20)){
      send_text_message("The ??? attacks you, and drains a bit of your MANA!")      
    } else {
      send_text_message("The ??? attacks you, but you are no MANA to drain, causing it to devour itself!")
      foe_hurt(150)
    }
    
  } else if(picked_action > 10){
  let picked_button = round(random(0, 4));
    if(picked_button <= 1){
      seeking_button = 1
      send_text_message("??? gazes at your attack button!")
    } else if(picked_button <= 2) {
      seeking_button = 2
      send_text_message("??? gazes at your block button!")
    } else if(picked_button <= 3) {
      seeking_button = 3
      send_text_message("??? gazes at your ex attack button!")
    } else if(picked_button <= 4) {
      seeking_button = 4
      send_text_message("??? gazes at your heal button!")
    }
  } else {
      if(player_change_MA(50)){
        send_text_message("The ??? drains your MANA!");
      } else {
        send_text_message("The ??? tries to drain your MANA, and fails causing it to devour itself!");
        foe_hurt(300)
      }
    
  }
}
foe_turn = false;
player_block = false;
hide_buttons = false;
foe_thinking_counter = 0;
}
  
  
  
  
  
//Buttons
function press_atk(){
  foe_hurt(round(random(20, 30)));
  player_change_MA(-10);
  hide_buttons = true;
  player_attacked = true;
  send_text_message("You attack the foe, and regain some MANA!");
  last_button = 1;
}

function press_blo(){
  player_change_MA(-30);
  send_text_message("You block the foes next attack, and regain a lot of MANA!");
  player_block = true;
  block_active = true;
  hide_buttons = true;
  last_button = 2;
}

function press_ex_atk(){
  if(player_change_MA(40)){
    player_attacked = true;
    hide_buttons = true;
    foe_hurt(round(random(40, 60)));
    send_text_message("You special attack the foe!");
    last_button = 3;
  } else {
    send_text_message("You don't have enough MANA...");    
  }
}

function press_heal(){
  if(player_change_MA(30)){
    hide_buttons = true;
    block_active = true;
    player_hurt(round(random(-25, -35)));
    send_text_message("You heal yourself!");
    last_button = 4;
  } else {
    send_text_message("You don't have enough MANA...");    
  }
}
  
function attack_button(){
  fill(247, 140, 126);
  rect(atk_but_x, atk_but_y, atk_but_w, atk_but_h, 20);
  fill(0, 0, 0);
  textSize(18);
  text('Attack', atk_but_x + 10, atk_but_y + 30);
  atk_but = true
}


function block_button(){
  fill(115, 217, 235);
  rect(blo_but_x, blo_but_y, blo_but_w, blo_but_h, 20);
  fill(0, 0, 0);
  textSize(18);
  text('Block', blo_but_x + 10, blo_but_y + 30);
  blo_but = true
}

function ex_attack_button(){
  fill(231, 232, 146);
  rect(ex_atk_but_x, ex_atk_but_y, ex_atk_but_w, ex_atk_but_h, 20);
  fill(0, 0, 0);
  textSize(14);
  text('EX Attack', ex_atk_but_x + 5, ex_atk_but_y + 30);
  ex_atk_but = true
}

function heal_button(){
  fill(66, 245, 147);
  rect(heal_but_x, heal_but_y, heal_but_w, heal_but_h, 20);
  fill(0, 0, 0);
  textSize(18);
  text('Heal', heal_but_x + 15, heal_but_y + 30);
  heal_but = true
}
  
function play_again(){
  fill(231, 232, 146);
  rect(play_but_x, play_but_y, play_but_w, play_but_h, 20);
  fill(0, 0, 0);
  textSize(22);
  text('Play again?', play_but_x + 40, play_but_y + 45);
  play_but = true
}

function medium_button(){
  fill(255, 179, 0);
  rect(medium_but_x, medium_but_y, medium_but_w, medium_but_h, 20);
  fill(0, 0, 0);
  textSize(22);
  text('Normal', medium_but_x + 12, medium_but_y + 45);
  medium_but = true
}
  
function easy_button(){
  fill(76, 235, 52);
  rect(easy_but_x, easy_but_y, easy_but_w, easy_but_h, 20);
  fill(0, 0, 0);
  textSize(22);
  text('Easy', easy_but_x + 25, easy_but_y + 45);
  easy_but = true
}

function hard_button(){
  fill(250, 126, 110);
  rect(hard_but_x, hard_but_y, hard_but_w, hard_but_h, 20);
  fill(0, 0, 0);
  textSize(22);
  text('Hard', hard_but_x + 25, hard_but_y + 45);
  hard_but = true
}

function secret_button(){
  fill(156, 29, 0);
  rect(secret_but_x, secret_but_y, secret_but_w, secret_but_h, 20);
  fill(0, 0, 0);
  textSize(22);
  text('G͍̍r͔͙͓̹̙͒̾̂̃̐e͈̹͔̱̽̽͌͞ė̗t̺͙̂̀i̻̰͆͛ṇ͌g̝͍͇̙͋͛͊̈s?̬̖͋͂̿̿͟͜', secret_but_x + 5, secret_but_y + 45);
  hard_but = true
}
  
function menu_button(){
  fill(231, 232, 146);
  rect(menu_but_x, menu_but_y, menu_but_w, menu_but_h, 20);
  fill(0, 0, 0);
  textSize(22);
  text('Return to menu?', menu_but_x + 25, menu_but_y + 45);
  menu_but = true
}
  
function restart_battle(){
  console.log('RESTART BATTLE Button pressed');
  scene = 1;
  player_HP = player_max_HP
  player_MANA = player_max_MANA/2
  foe_HP = foe_max_HP
  
  player_hb_x = player_hb_x_max
  player_hb_x_target = player_hb_x_max

  foe_hb_x = foe_hb_x_max
  foe_hb_x_target = foe_hb_x_max

  player_mb_x = player_mb_x_max/2
  foe_turn = false;
  player_block = false;
  hide_buttons = false;
  hurt_counter = 255;
  foe_thinking_counter = 0;
  seeking_button = -1;
  send_text_message("Combat is starting...");
}
